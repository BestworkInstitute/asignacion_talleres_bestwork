import React, { useState } from 'react';
import { format, nextMonday } from 'date-fns'; // eliminamos addDays porque no se usa
import es from 'date-fns/locale/es';

export default function EnviarHorarios({ profesores, talleresAsignados }) {
  const [estadoEnvio, setEstadoEnvio] = useState({});
  const [fechaLimite, setFechaLimite] = useState('');
  const [mensajePersonalizado, setMensajePersonalizado] = useState('');
  const [modo, setModo] = useState('original');
  const [enviando, setEnviando] = useState(false);

  const lunes = nextMonday(new Date());
  const semanaTexto = `semana del ${format(lunes, "dd/MM/yyyy", { locale: es })}`;

  const handleEnviar = async () => {
    if (!fechaLimite) {
      alert("Por favor ingresa una fecha l√≠mite de confirmaci√≥n.");
      return;
    }

    setEnviando(true);

    for (const prof of profesores) {
      if (!prof.correo || !prof.correo.includes('@')) {
        console.warn(`‚õî Sin correo v√°lido para ${prof.nombre}`);
        continue;
      }

      const bloques = talleresAsignados
        .filter(t => t.profesorAsignado === prof.nombre)
        .map(t => `- ${t.dia} ${t.bloque} ${t.curso}`)
        .join('\n');

      const resumenBloques = bloques || '- No tiene bloques asignados esta semana -';

      let mensajeFinal = '';

      if (modo === 'original') {
        mensajeFinal = `
Profesor(a): ${prof.nombre}

Junto con saludar, enviamos las asignaciones de la ${semanaTexto}.

Para confirmar asignaciones ingresar al siguiente link, el que nos llevar√° al Campus Virtual donde desplegando la pesta√±a ‚ÄúGeneral‚Äù veremos ‚ÄúConfirmaci√≥n de Carga Acad√©mica‚Äù, lugar donde adem√°s tambi√©n debemos mencionar, si es el caso, el d√≠a y la hora de la asignaci√≥n que no pueden tomar.

IMPORTANTE: El plazo para confirmar las asignaciones es hasta el ${fechaLimite} a las 17:00 Hrs. De no haber confirmado se considerar√° que no puede asistir a ning√∫n taller y estos ser√°n reasignados.

IMPORTANTE: Al realizar un taller NO ingresar como invitado ni con una cuenta personal de Zoom, de tal forma no podr√° iniciar el taller.

Ingresar primero a la p√°gina de Zoom, asegurarnos que no hay ninguna sesi√≥n abierta,
cerrar si las hay e iniciar sesi√≥n con la sala que le corresponde al taller a realizar.
Luego, reci√©n ir al campus, ir al nivel del taller a cubrir y hacer clic en el link de Zoom respectivo.

Resumen de Bloques Semanal:
${resumenBloques}

Link: https://campusvirtual.bestwork.cl/course/view.php?id=233
        `.trim();
      } else {
        mensajeFinal = `
${mensajePersonalizado.trim()}

Resumen de Bloques asignados:
${resumenBloques}
        `.trim();
      }

      try {
        const res = await fetch('/api/send-email', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            to: prof.correo,
            subject: `Horarios Captaci√≥n en Terreno - ${prof.nombre}`,
            text: mensajeFinal,
            from: 'ftobar@bestwork.cl',
          }),
        });

        if (res.ok) {
          setEstadoEnvio(prev => ({ ...prev, [prof.nombre]: '‚úÖ Enviado' }));
        } else {
          setEstadoEnvio(prev => ({ ...prev, [prof.nombre]: '‚ùå Error al enviar' }));
        }
      } catch (error) {
        console.error(error);
        setEstadoEnvio(prev => ({ ...prev, [prof.nombre]: '‚ùå Error de red' }));
      }
    }

    setEnviando(false);
  };

  return (
    <div style={{ marginTop: '3rem', padding: '1.5rem', background: '#fff', borderRadius: '8px' }}>
      <h2>üì§ Enviar horarios por correo</h2>
      <p>Si la asignaci√≥n est√° correcta, puedes enviar la informaci√≥n a cada profesor.</p>

      <div style={{ marginBottom: '1rem' }}>
        <label><strong>Fecha l√≠mite de confirmaci√≥n:</strong></label>
        <input
          type="text"
          value={fechaLimite}
          onChange={(e) => setFechaLimite(e.target.value)}
          placeholder="Ej: Viernes 21/03/2025 a las 18:00 hrs"
          style={{ width: '100%', padding: '8px', marginTop: '6px' }}
        />
      </div>

      <div style={{ marginBottom: '1rem' }}>
        <label><strong>Selecciona el modo de mensaje:</strong></label><br />
        <button
          onClick={() => setModo('original')}
          disabled={modo === 'original'}
          style={modo === 'original' ? styles.buttonSelected : styles.button}
        >
          Usar plantilla original
        </button>
        <button
          onClick={() => setModo('personalizado')}
          disabled={modo === 'personalizado'}
          style={modo === 'personalizado' ? styles.buttonSelected : styles.button}
        >
          Escribir mensaje personalizado
        </button>
      </div>

      {modo === 'personalizado' && (
        <div style={{ marginBottom: '1rem' }}>
          <label><strong>Mensaje personalizado:</strong></label>
          <textarea
            value={mensajePersonalizado}
            onChange={(e) => setMensajePersonalizado(e.target.value)}
            rows={6}
            placeholder="Escribe tu mensaje aqu√≠..."
            style={{ width: '100%', padding: '10px', borderRadius: '6px', border: '1px solid #ccc' }}
          />
        </div>
      )}

      <button
        onClick={handleEnviar}
        disabled={enviando || !fechaLimite}
        style={{
          backgroundColor: enviando ? '#999' : '#28a745',
          color: '#fff',
          padding: '12px 24px',
          border: 'none',
          borderRadius: '6px',
          fontSize: '16px',
          cursor: enviando ? 'not-allowed' : 'pointer',
          marginTop: '1rem'
        }}
      >
        {enviando ? 'Enviando correos...' : 'üìß SEGUIR Y ENVIAR CORREOS'}
      </button>

      <div style={{ marginTop: '2rem' }}>
        {Object.entries(estadoEnvio).map(([nombre, estado], i) => (
          <p key={i}><strong>{nombre}</strong>: {estado}</p>
        ))}
      </div>
    </div>
  );
}

const styles = {
  button: {
    marginRight: '10px',
    padding: '8px 16px',
    borderRadius: '5px',
    border: '1px solid #ccc',
    backgroundColor: '#eee',
    cursor: 'pointer'
  },
  buttonSelected: {
    marginRight: '10px',
    padding: '8px 16px',
    borderRadius: '5px',
    border: '2px solid #007bff',
    backgroundColor: '#d0e7ff',
    cursor: 'default'
  }
};
